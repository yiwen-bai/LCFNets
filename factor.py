import numpy as np
import statistics

#Params最大归一化处理------------------------------------------------------------------------
def min_max_normalization(data):
    min_val = min(data)
    max_val = max(data)

    normalized_data = [(max_val - x) / (max_val - min_val) for x in data]
    return normalized_data


# Params数据
parameters = [0.36, 0.17, 0.94, 17.1, 5.2, 10.1, 7.28, 7.64, 28.27, 8.4, 12.5, 10.2, 7.28, 7.64, 28.27, 8.55, 8.55, 11.8, 24.7, 2.64, 5.7, 5.7, 20.1, 20.1, 7.6, 7.6, 34.4, 7.28, 7.64, 28.27, 7.28, 7.64, 28.27]#33组

# 归一化处理
normalized_parameters = min_max_normalization(parameters)

print("Params 最大归一化:", normalized_parameters)


#FPS最小归一化处理------------------------------------------------------------------------
def min_max_normalization(data):
    min_val = min(data)
    max_val = max(data)

    normalized_data = [(x - min_val) / (max_val - min_val) for x in data]
    return normalized_data


# FPS数据
FPS_parameters = [112.9, 107, 71.0, 65.5, 47.3, 43.1, 171.02, 147.20, 90.91, 126.7, 97.0, 33.2, 142.81, 119.87, 63.11, 106.4, 56.3, 39.9, 18.4, 76.5, 98.56, 98.56, 31.65, 31.65, 97.61, 91.87, 39.8, 114.36, 92.37, 47.46, 114.36, 92.37, 47.46]#33组

# 归一化处理
normalized_parameters = min_max_normalization(FPS_parameters)

print("FPS 最小归一化:", normalized_parameters)


#mIoU平均值计算------------------------------------------------------------------------
def calculate_average(mIoU_val, mIoU_test):
    average = [(val + test) / 2 for val, test in zip(mIoU_val, mIoU_test)]
    return average

# mIoU数据
mIoU_val = [0.603, 0.619, 0.706, 0.748, 0.758, 0.752, 0.7657, 0.7752, 0.7851, 0.745, 0.770, 0.776, 0.7687, 0.7792, 0.7866, 0.759, 0.769, 0.755, 0.765, 0.766, 0.754, 0.774, 0.7812, 0.7902, 0.7806, 0.7809, 0.801, 0.7686, 0.7796, 0.7910, 0.7896, 0.7987, 0.8072]#33组
mIoU_test = [0.603, 0.619, 0.706, 0.747, 0.753, 0.757, 0.7658, 0.7759, 0.7856, 0.753, 0.768, 0.777, 0.7687, 0.7793, 0.7863, 0.748, 0.753, 0.754, 0.765, 0.759, 0.754, 0.776, 0.7816, 0.7907, 0.7802, 0.7806, 0.801, 0.7685, 0.7793, 0.7907, 0.7895, 0.7987, 0.8070]#33组

# 计算平均值
avg = calculate_average(mIoU_val, mIoU_test)

# 输出结果
print("mIoU 平均值:", avg)


# #GPU计算------------------------------------------------------------------------
# def calculate_GPU(GPU_type):
#     GPU = [gpu * 1 for gpu in GPU_type]
#     return GPU
#
# # GPU数据
# GPU_type = [0.8, 0.5, 0.65, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.65, 0.65, 0.65, 0.65, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.2, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35]#33组
#
# # 计算GPU数值
# GPU = calculate_GPU(GPU_type)
#
# # 输出结果
# print("GPU:", GPU)


#factor计算------------------------------------------------------------------------
def calculate_factor(mIoU, FPS, Params, GPU_type):
    b1 = 0.35
    b2 = 0.35
    b3 = 0.2
    b4 = 0.1

    factor = [b1 * x1 + b2 * x2 + b3 * x3 + b4 * x4 for x1, x2, x3, x4 in zip(mIoU, FPS, Params, GPU_type)]
    return factor


# 示例数据
mIoU = [0.603, 0.619, 0.706, 0.7475, 0.755, 0.7545, 0.76575, 0.77555, 0.78535, 0.749, 0.769, 0.7765, 0.7687, 0.7792, 0.7864, 0.7535, 0.761, 0.7545, 0.765, 0.7625, 0.754, 0.775, 0.7814, 0.79045, 0.7804, 0.78075, 0.801, 0.76855, 0.77945, 0.79085, 0.78955, 0.7987, 0.8071]
FPS = [0.619, 0.580, 0.344, 0.308, 0.189, 0.161, 1.0, 0.843, 0.475, 0.709, 0.515, 0.096, 0.815, 0.664, 0.292, 0.576, 0.248, 0.140, 0, 0.380, 0.525, 0.525, 0.086, 0.086, 0.519, 0.481, 0.140, 0.628, 0.484, 0.190, 0.628, 0.484, 0.190]
Params = [0.994, 1.0, 0.977, 0.505, 0.853, 0.709, 0.792, 0.781, 0.179, 0.759, 0.639, 0.706, 0.792, 0.781, 0.179, 0.755, 0.755, 0.660, 0.283, 0.927, 0.838, 0.838, 0.417, 0.417, 0.782, 0.782, 0, 0.792, 0.781, 0.179, 0.792, 0.781, 0.179]
GPU_type = [0.8, 0.5, 0.65, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.65, 0.65, 0.65, 0.65, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.2, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35]

# 计算 factor 值
factor = calculate_factor(mIoU, FPS, Params, GPU_type)

# 输出结果
print("factor:", factor)

# factor: [[0.706, 0.669, 0.627, 0.505, 0.536, 0.497, 0.811, 0.757, 0.511, 0.697, 0.612, 0.481, 0.747, 0.696, 0.448, 0.681, 0.569, 0.510, 0.389, 0.620, 0.650, 0.657, 0.421, 0.425, 0.646, 0.633, 0.349, 0.682, 0.633, 0.414, 0.689, 0.640, 0.419]


# #方差计算------------------------------------------------------------------------
# def calculate_variance(data):
#     variance = statistics.variance(data)
#     return variance
#
# # 每一类mIoU数据
# star = [0.98141168, 0.84923978, 0.92269201, 0.52942671, 0.61860857, 0.62663886, 0.69008027, 0.77175071, 0.92400181, 0.6562346,  0.94560905, 0.81202046, 0.63339864, 0.94914036, 0.73391643, 0.82121638, 0.73558493, 0.6065131, 0.76127064]
#
# # 计算方差
# variance = calculate_variance(star)
#
# # 输出结果
# print("方差:", variance)
